{"version":3,"sources":["components/AddCategory.js","helpers/getgifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFectchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","name","id","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,KAAK,GACLC,GAAG,GACHC,MAAOX,EACPY,SAnBc,SAAAT,GAAC,OAAIF,EAAcE,EAAEU,OAAOF,a,+BCP7CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHf,GAAIe,EAAIf,GACRgB,MAAOD,EAAIC,MACXT,IAAKQ,EAAIE,OAAOC,iBAAiBX,QAVtB,kBAcZM,GAdY,4CAAH,sDCEPM,EAAc,SAAC,GAAsB,EAApBnB,GAAqB,IAAjBgB,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAErC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNY,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACNvB,EAAQC,GACHuB,MAAK,SAAAC,GACFH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGvB,CAACnB,IAEIoB,EDbwBK,CAAazB,GAAhCY,EAFyB,EAE9BL,KAAaY,EAFiB,EAEjBA,QAEpB,OACI,qCACI,6BAAMnB,IAELmB,GAAW,2CAEZ,qBAAKJ,UAAU,YAAf,SACUH,EAAOH,KAAI,SAAAiB,GAAG,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAI/B,aEbxBgC,EAAe,WAAO,IAAD,EACM3C,mBAAS,CAAC,mBADhB,mBACvB4C,EADuB,KACX7C,EADW,KAG9B,OACI,gCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEQ6C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAASA,SAAWA,GAAiBA,YCb7D6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f63d2a06.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = e => setInputValue(e.target.value);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue('');    \r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                name=\"\" \r\n                id=\"\"\r\n                value={inputValue}\r\n                onChange={handleInputChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CwYRmyeGmrvBILuZDWPGxsrup1D1GLfv`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(gif => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFectchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n\r\n            {loading && <p>Loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                    { images.map(img => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img} />\r\n                    )) }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getgifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    },[category])\r\n\r\n    return state;\r\n}","import { React, useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Peaky Blinders']);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories={ setCategories } />\r\n            \r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid category={ category } key={ category }/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}